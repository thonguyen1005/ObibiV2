@model Decimal
@{
    var htmlAttributes = (Dictionary<string, object>)ViewData["htmlAttributes"];
    object @class;
    if (htmlAttributes.TryGetValue("class", out @class))
    {
        htmlAttributes["class"] = "form-control input-money text-right " + @class;
    }
    else
    {
        htmlAttributes.Add("class", "form-control input-money text-right");
    }

    var decimalDigit = (int)ViewData["decimalDigit"];
}
@Html.TextBox("", Utils.FormatFloat(Model, decimalDigit), "{0:##.#}", ViewData["htmlAttributes"])
@{
    var postfix = "";
    if (ViewData.ContainsKey("postfix") && ViewData["postfix"] != null)
    {
        postfix = ViewData["postfix"].ToString();
    }
}

@if (Context.IsAjaxRequest())
{
    <script>
    $(document).ready(function () {
        if ($("#@Html.IdForModel()").length > 0) {
            var v_negative = $("#@Html.IdForModel()").data('negative');
            var decimal = parseFloat($("#@Html.IdForModel()").data('decimal'));
            if (isNaN(decimal)) decimal = 0;
            new Cleave("#@Html.IdForModel()", {
                numeral: true,
                numeralThousandsGroupStyle: 'thousand',
                numeralPositiveOnly: !v_negative ? true : false,
                numeralDecimalScale: (decimal > 0 ? decimal : 15),
            });
        }
    });
    </script>
}