@model DataTablesModel
@using System.Net;
@using VSW.Website.Models.DataTables;

@{
    //the locale which MomentJS should use - the default is en (English).
    var locale = "en";

    //Model name for js function names
    var model_name = Model.Name.Replace("-", "_");

    //dom
    var buttonsPanel = "";
    var infoPanel = "<'col-lg-4 col-xs-12'<'float-lg-right text-center'i>>";

    if (Model.RefreshButton && !Model.IsChildTable)
    {
        buttonsPanel = "<'col-lg-1 col-xs-12'<'float-lg-right text-center data-tables-refresh'B>>";
        infoPanel = "<'col-lg-3 col-xs-12'<'float-lg-right text-center'i>>";
    }

    var dom = "<'row'<'col-md-12't>>" +
              "<'row margin-t-5'" +
                "<'col-lg-5 col-xs-12'<'float-lg-left'p>>" +
                "<'col-lg-3 col-xs-12'<'text-center'l>>" +
                infoPanel +
                buttonsPanel +
              ">";

    if (!string.IsNullOrEmpty(Model.Dom))
    {
        dom = Model.Dom;
    }
    var isMasterCheckBoxUsed = Model.ColumnCollection.Any(x => x.IsMasterCheckBox);
}

@functions
{
    string GetUrl(DataUrl dataUrl)
    {
        if (dataUrl == null) return string.Empty;
        return !string.IsNullOrEmpty(dataUrl?.ActionName) && !string.IsNullOrEmpty(dataUrl.ControllerName)
            ? Url.Action(dataUrl.ActionName, dataUrl.ControllerName, dataUrl.RouteValues)
            : !string.IsNullOrEmpty(dataUrl.Url)
            ? $"{(dataUrl.Url.StartsWith("~/", StringComparison.Ordinal) ? Url.Content(dataUrl.Url) : dataUrl.Url).TrimEnd('/')}" + (!dataUrl.TrimEnd ? "/" : "")
            : string.Empty;
    }
}

@if (!string.IsNullOrEmpty(Model.HeaderCallback))
{
    <text>
        headerCallback: function (thead, data, start, end, display) {
        return @(Model.HeaderCallback)(thead, data, start, end, display);
        },
    </text>
}
@if (!string.IsNullOrEmpty(Model.FooterCallback))
{
    <text>
        footerCallback: function (tfoot, data, start, end, display) {
        return @(Model.FooterCallback)(tfoot, data, start, end, display);
        },
    </text>
}
@if (Model.Processing)
{
    <text>
        processing: @Model.Processing.ToString().ToLower(),
    </text>
}
@if (Model.ServerSide)
{
    <text>
        serverSide: @Model.ServerSide.ToString().ToLower(),
    </text>
}
@if (Model.Select)
{
    <text>
        select: @Model.Select.ToString().ToLower(),
    </text>
}
@if (Model.Data != null)
{
    <text>
        data: @Html.Raw(Model.Data.ToString()),
    </text>
}
else
{
    <text>
        ajax:
        {
        url: "@Html.Raw(GetUrl(Model.UrlRead))",
        type: "@WebRequestMethods.Http.Post",
        dataType: "json",
        dataSrc: "data",
        data: function(data) {
        @*$('#loading').show();*@
        @if (Model.Filters != null)
        {
            foreach (var filter in Model.Filters)
            {
                if (filter.Type == typeof(string))
                {
                    if (Model.IsChildTable && !string.IsNullOrEmpty(filter.ParentName))
                    {
                        <text>
                        data.@filter.Name = row.data().@filter.ParentName;
    </text>
    continue;
}

if (!string.IsNullOrEmpty(filter.ModelName))
{
    <text>
        data.@filter.Name = $('#@(filter.ModelName)_@filter.Name').val();
    </text>
}
else
{
    <text>
        data.@filter.Name = $('#@filter.Name').val();
    </text>
}
continue;
}
if (filter.Type == typeof(bool))
{
<text>
    data.@filter.Name = $('#@filter.Name').is(':checked');
</text>
continue;
}
if (filter.Type == typeof(int))
{
if (int.TryParse(@filter.Value.ToString(), out int val))
{
    <text>
        data.@filter.Name = @val;
    </text>
}
continue;
}
if (filter.Type == typeof(DateTime))
{
<text>
    data.@filter.Name = $('#@filter.Name').val();
</text>
continue;
}
}
}
        addAntiForgeryToken(data);
        return data;
        }
        },
        </text>
    }
@*scrollX: true,*@
info: @Model.Info.ToString().ToLower(),
paging: @Model.Paging.ToString().ToLower(),
searching: false,
pagingType: '@Model.PagingType',
language: @await Html.PartialAsync("_GridLocalization"),
pageLength: @Model.Length,
lengthMenu: [10, 20, 30, 50, 100],
responsive: {
    details: {type: 'column'},
    breakpoints: [
        { name: 'desktop', width: Infinity },
        { name: 'tablet-l', width: 1200 },
        { name: 'tablet-p', width: 992 },
        { name: 'mobile-l', width: 576 },
        { name: 'mobile-p', width: 320 }
    ]
},
@*columnDefs: [
    {
    orderable: false,
    targets: 0
    }
    @if (isMasterCheckBoxUsed)
    {
    <text>
    ,
    {
    orderable: false,
    targets: 1
    }
    </text>
    }
    ],*@
@*@if (!string.IsNullOrEmpty(Model.LengthMenu))
    {
    <text>
    lengthMenu: [@Model.LengthMenu],
    </text>
    }
    else
    {
    <text>
    lengthChange: false,
    </text>
    }*@
                ordering: false,
@if (Model.RefreshButton)
{
    <text>
        buttons: [{
        name: 'refresh',
        text: '<i class="fa fa-refresh" style="padding-left: 5px"></i>',
        action: function () {
        updateTable('#@Model.Name');
        }
        }],
    </text>
}
                dom: '@JavaScriptEncoder.Default.Encode("<'datatable-header'fr><'datatable-body't><'datatable-footer'<'datatable-li'li>p>")',
                columns: [
                @if (Model.ColumnCollection.Count > 0)
                {
                    string column_name = Model.ColumnCollection[0].Data;
                    @*add column reponsize*@
                    <text>
                        { "data": "@(column_name)", "className": "control not-desktop text-center", "render": function (data, type, row, meta) { return ''; }},
                    </text>
                }
                @for (int i = 0; i < Model.ColumnCollection.Count; i++)
                {
                    var column = Model.ColumnCollection[i];
                    string column_name = column.Data;
                    <text>
                        {
                        @if (!string.IsNullOrEmpty(column.Title) && !column.IsMasterCheckBox)
                        {
                            <text>
                            title: '@JavaScriptEncoder.Default.Encode(column.Title)',
                    </text>
                }
                else
                {
                    if (!string.IsNullOrEmpty(column.Title) && column.IsMasterCheckBox)
                    {
                        <text>
                            title: '<div class="checkbox"><label><input id="mastercheckbox" type="checkbox" />@JavaScriptEncoder.Default.Encode(column.Title)</label></div>',
                        </text>
                    }
                    else
                    {
                        if (string.IsNullOrEmpty(column.Title) && column.IsMasterCheckBox)
                        {
                            <text>
                                title: '<input id="mastercheckbox" type="checkbox" />',
                            </text>
                        }
                    }
                }
                        width: '@column.Width',
                        visible: @column.Visible.ToString().ToLower(),
                        searchable: @column.Searchable.ToString().ToLower(),
                        @if (column.AutoWidth)
                        {
                            <text>
                                autoWidth: @column.AutoWidth.ToString().ToLower(),
                            </text>
                        }
                        @if (!string.IsNullOrEmpty(column.ClassName))
                        {
                            <text>
                                className: '@column.ClassName',
                            </text>
                        }
                        @if ((Model.UrlUpdate != null) || (Model.ChildTable?.UrlUpdate != null))
                        {
                            <text>
                                createdCell: function (td, cellData, rowData, row, col) {
                                $(td).attr('data-columnname', '@column.Data');
                                },
                            </text>
                        }
                        @if (column.Encode && column.Render == null)
                        {
                            <text>
                                render: function (data, type, row, meta) {
                                if (data == null) return '';
                                if (data == '') return '';
                                return escapeHtml(data);
                                },
                            </text>
                        }
                        @switch (column.Render)
                        {
                            case RenderLink link:
                                string dataId = link.Url.DataId;
                                <text>
                                    render: function (data, type, row, meta) {
                                    var textRenderer = $.fn.dataTable.render.text().display;

                                    var url = '@GetUrl(link.Url)' + textRenderer(row.@dataId);
                                    @if (link.Url.RouteValues != null)
                                    {
                                        var keys = link.Url.RouteValues.Keys.ToList();
                                        var query = "?";
                                        for (int l = 0; l < keys.Count; l++)
                                        {
                                            var key = keys[l];
                                            var keyPair = link.Url.RouteValues[key];
                                            if (l != 0)
                                            {
                                                query += "&";
                                            }
                                            query += $"{key}={keyPair.ToString()}";
                                        }
                                        <text>
                                        url += "@query";
                                </text>
                            }
                                    @if (!string.IsNullOrEmpty(link.Title))
                                    {
                                        <text>
                                            return '<a href="'+ url + '" target="@(link.Target)">@JavaScriptEncoder.Default.Encode(link.Title)</a>';
                                        </text>
                                    }
                                    else
                                    {
                                        <text>
                                            return '<a href="' + url + '" target="@(link.Target)">' + RenderData(data, '@link.Format.GetName()') + '</a>';
                                        </text>
                                    }
                                    },
                                    </text>
                                    break;
                                case RenderJavascript javascript:
                                    <text>
                                        render: function (data, type, row, meta) {
                                        var textRenderer = $.fn.dataTable.render.text().display;
                                        @if (!string.IsNullOrEmpty(javascript.Title))
                                        {
                                            <text>
                                            return "<a href=\"javascript:@(javascript.Function)('@(javascript.Url.IsEmpty() ? "" : javascript.Url + "/" )" + textRenderer(row.@javascript.DataId) + "')\">@JavaScriptEncoder.Default.Encode(javascript.Title)</a>";
                                    </text>
                                }
                                else
                                {
                                    <text>
                                        return "<a href=\"javascript:@(javascript.Function)('@(javascript.Url.IsEmpty() ? "" : javascript.Url + "/" )" + textRenderer(row.@javascript.DataId) + "')\">"+RenderData(data, '@javascript.Format.GetName()')+"</a>";
                                    </text>
                                }
                                        },
                                        </text>
                                        break;
                                    case RenderDate date:
                                        <text>
                                            render: function (data, type, row, meta) {
                                            return formatDate(data,'@locale','@date.Format');
                                            },
                                        </text>
                                        break;
                                    case RenderMoney money:
                                        <text>
                                            render: function (data, type, row, meta) {
                                            return formatMoney(data);
                                            },
                                        </text>
                                        break;
                                    case RenderFloat @float:
                                        <text>
                                            render: function (data, type, row, meta) {
                                            return formatFloat(data);
                                            },
                                        </text>
                                        break;
                                    case RenderButtonRemove button:
                                        <text>
                                            render: function (data, type, row, meta) {
                                            return '<a href="#" class="@button.ClassName" onclick="table_deletedata_@(model_name)(\'' + data + '\');return false;"><i class="fa fa-remove"></i>@button.Title</a>';
                                            },
                                        </text>
                                        break;
                                    case RenderButtonsInlineEdit button:
                                        <text>
                                            render: function (data, type, row, meta) {
                                            var origData = data;
                                            var modData = data;
                                            if (typeof data == 'string'){
                                            modData = data.replace(/[.*+?^${}()|[\]\\]/g, "_");
                                            }
                                            return '<a href="#" class="@button.ClassName" id="buttonEdit_@(model_name)'+ modData + '" onclick="editData_@(model_name)($(this).parent().parent(), \'' + origData + '\');return false;"><i class="fa fa-pencil"></i>Edit</a>' +
                                            '<a href="#" class="@button.ClassName" id="buttonConfirm_@(model_name)'+ modData + '" style="display:none" onclick="confirmEditData_@(model_name)($(this).parent().parent(), \'' + origData + '\', \'@column_name\');return false;"><i class="fa fa-check"></i>Update</a>' +
                                            '<a href="#" class="@button.ClassName" id="buttonCancel_@(model_name)'+ modData + '" style="display:none" onclick="cancelEditData_@(model_name)(\'' + row + '\', \'' + origData + '\');return false;"><i class="fa fa-ban"></i>Cancel</a>';
                                            },
                                        </text>
                                        break;
                                    case RenderButtonEdit buttonEdit:
                                        <text>
                                            render: function (data, type, row, meta) {
                                            return '<a class="@buttonEdit.ClassName" href="@GetUrl(buttonEdit.Url)' + data + '"><i class="fa fa-pencil"></i>Sửa</a>';
                                            },
                                        </text>
                                        break;
                                    case RenderButtonView buttonView:
                                        <text>
                                            render: function (data, type, row, meta) {
                                            return '<a class="@buttonView.ClassName" href="@GetUrl(buttonView.Url)' + data + '"><i class="fa fa-eye"></i>Xem</a>';
                                            },
                                        </text>
                                        break;
                                    case RenderButtonCustom buttonCustom:
                                        if (!string.IsNullOrEmpty(buttonCustom.Url))
                                        {
                                            <text>
                                                render: function (data, type, row, meta) {
                                                return '<a class="@buttonCustom.ClassName" href="@buttonCustom.Url' + data + '">@JavaScriptEncoder.Default.Encode(buttonCustom.Title)</a>';
                                                },
                                            </text>
                                        }
                                        if (!string.IsNullOrEmpty(buttonCustom.OnClickFunctionName))
                                        {
                                            <text>
                                                render: function (data, type, row, meta) {
                                                return '<a class="@buttonCustom.ClassName" onclick="@buttonCustom.OnClickFunctionName' + '(' + data + ');">@JavaScriptEncoder.Default.Encode(buttonCustom.Title)</a>';
                                                },
                                            </text>
                                        }
                                        break;
                                    case RenderPicture picture:
                                        <text>
                                            render: function (data, type, row, meta) {
                                            @if (!string.IsNullOrEmpty(picture.Src))
                                            {
                                                <text>
                                                    return '<img src="@(picture.SrcPrefix)@(picture.Src)" />';
                                                </text>
                                            }
                                            else
                                            {
                                                <text>
                                                    return '<img src="@(picture.SrcPrefix)' + data + '" />';
                                                </text>
                                            }
                                            },
                                        </text>
                                        break;
                                    case RenderCheckBox checkBox:
                                        string propertyKeyName = checkBox.PropertyKeyName;

                                        <text>
                                            render: function (data, type, row, meta) {
                                            var html =  (data === true)
                                            ? '<input name="@checkBox.Name" id="@checkBox.Name'+meta.row+'" value="' + row.@(!string.IsNullOrEmpty(propertyKeyName) ? propertyKeyName : column_name) + '" type="checkbox" class="checkboxGroups" checked="checked" />'
                                            : '<input name="@checkBox.Name" id="@checkBox.Name'+meta.row+'" value="' + row.@(!string.IsNullOrEmpty(propertyKeyName) ? propertyKeyName : column_name) + '" type="checkbox" class="checkboxGroups" />';
                                            @if (column.IsHiddenJson)
                                            {
                                                <text>
                                                    html += '<input name="@column.HiddenTag' + row.@(!string.IsNullOrEmpty(propertyKeyName) ? propertyKeyName : column_name) + '" id="@column.HiddenTag' + row.@(!string.IsNullOrEmpty(propertyKeyName) ? propertyKeyName : column_name) + '" value="' + encodeURI(JSON.stringify(row)) + '" type="hidden" />';
                                                </text>
                                            }
                                            return html;
                                            },
                                        </text>
                                        break;
                                    case RenderRadio radio:
                                        string propertyRadioKeyName = radio.PropertyKeyName;
                                        <text>
                                            render: function (data, type, row, meta) {
                                            var html =  (data === true)
                                            ? '<input name="@radio.Name" id="@radio.Name'+meta.row+'" value="' + row.@(!string.IsNullOrEmpty(propertyRadioKeyName) ? propertyRadioKeyName : column_name) + '" type="radio" class="checkboxGroups" checked="checked" />'
                                            : '<input name="@radio.Name" id="@radio.Name'+meta.row+'" value="' + row.@(!string.IsNullOrEmpty(propertyRadioKeyName) ? propertyRadioKeyName : column_name) + '" type="radio" class="checkboxGroups" />';
                                            @if (column.IsHiddenJson)
                                            {
                                                <text>
                                                    html += '<input name="@column.HiddenTag' + row.@(!string.IsNullOrEmpty(propertyRadioKeyName) ? propertyRadioKeyName : column_name) + '" id="@column.HiddenTag' + row.@(!string.IsNullOrEmpty(propertyRadioKeyName) ? propertyRadioKeyName : column_name) + '" value="' + encodeURI(JSON.stringify(row)) + '" type="hidden" />';
                                                </text>
                                            }
                                            return html;
                                            },
                                        </text>
                                        break;
                                    case RenderBoolean renderBoolean:
                                        <text>
                                            render: function (data, type, row) {
                                            return data
                                            ? '<i class="fa fa-check true-icon" nop-value="true"></i>'
                                            : '<i class="fa fa-close false-icon" nop-value="false"></i>';
                                            },
                                        </text>
                                        break;
                                    case RenderCustom custom:
                                        <text>
                                            render: function (data, type, row, meta) {
                                            return @(custom.FunctionName)(data, type, row, meta);
                                            },
                                        </text>
                                        break;
                                    case RenderChildCaret caret:
                                        <text>
                                            render: function (data, type, row, meta) {
                                            return '<i class="fa fa-caret-right" aria-hidden="true"></i>';
                                            },
                                        </text>
                                        break;
                                }
                        data: '@(column_name)'
                        }
                        @if (i != Model.ColumnCollection.Count - 1)
                        {
                            <text>,</text>
                        }
                        </text>
                    }
                ],
                drawCallback: function(settings) {
                @*try{
                    var api = this.api();
                    var json = api.ajax.json();
                    var check = "json_filter" in json ? true : false;
                    if(check){
                    var json_filter = json.json_filter;
                    if($('#json_filter').length){
                    $('#json_filter').val(json_filter);
                    }
                    }
                    }
                    catch{}*@
                @if (isMasterCheckBoxUsed)
                {
                    <text>
                        $('#mastercheckbox').prop("checked", false);
                        var api = this.api();
                        var json = api.ajax.json();
                        var check = "isApprover" in json ? true : false;
                        if(check){
                        var isApprover = json.isApprover;
                        CheckIsApprover(isApprover);
                        }
                    </text>
                }
                @*$('#loading').hide();*@
                }